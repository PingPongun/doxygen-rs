var searchIndex = JSON.parse('{\
"doxygen_rs":{"doc":"Simple Doxygen to Rustdoc translation.","t":[0,0,0,5,5,12,12,12,12,3,4,13,13,3,13,3,3,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,12,12,12,12,11,12,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,13,13,13,13,4,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,12,12,12,12,12],"n":["ast","generator","parser","transform","transform_bindgen","0","0","0","0","Deprecated","Direction","In","InOut","Note","Out","Param","ParsedDoxygen","Return","ReturnValue","Warning","arg_name","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brief","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","deprecated","description","description","direction","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","generate_ast","into","into","into","into","into","into","into","into","is_deprecated","message","notes","params","partial_cmp","return_values","returns","title","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","todos","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warnings","generate_rustdoc","Notation","Parsed","Raw","Separator","StringType","Text","Unknown","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","into","into","parse_bindgen","parse_comment","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","1"],"q":["doxygen_rs","","","","","doxygen_rs::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","doxygen_rs::generator","doxygen_rs::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","doxygen_rs::parser::StringType","","doxygen_rs::parser::Value","",""],"d":["This module contains functions that generate ASTs from <code>Vec</code> …","Generate raw Rustdoc comments from a given …","This module contains functions to generate a <code>Vec</code> of <code>Value</code> …","Transforms raw Doxygen comments to raw Rustdoc comments","","","","","","Represents the <em>deprecation</em> status of an item.","The <em>direction</em> of an argument. Check Doxygen docs for more …","","","Represents a <em>note</em>","","Represents a single <em>parameter</em>.","Represents a parsed Doxygen comment.","Represents a <em>return</em>","Represents a <em>return</em> value","Represents a <em>warning</em>","The <em>argument name</em> of the item being documented.","","","","","","","","","","","","","","","","","A <em>brief</em> introduction to the item being documented.","","","","","","","","","","","","","","","","","","Data about the <em>deprecation</em> status of the item being …","A <em>description</em> of the item being documented.","The <em>description</em> of the argument.","The <em>direction</em> of the argument. Check Doxygen docs for more …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generates a <code>ParsedDoxygen</code> from a <code>Vec</code> of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether <em>is deprecated</em> or not","The message left with the deprecation status","List of <em>notes</em> of the item being documented.","The <em>parameters</em> of the item being documented.","","Possible <em>return values</em> of the item being documented","Description of the values being <em>returned</em>","<em>Title</em> of the item being documented","","","","","","","","","","List of _To Do_s of the item being documented.","","","","","","","","","","","","","","","","","","","","","","","","","","List of <em>warnings</em> of the item being documented.","Generate raw Rustdoc comments from a given …","The first <code>String</code> is the <em>notation</em> found, and the second …","Parsed value","No-doc, value is given raw","Double new-line, or any other separator","The enum used to represent values of a <em>raw</em> bindgen file","Raw text, without notation","Unknown value","The enum used to represent the distinct <em>raw</em> values of a …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Generate a <code>Vec</code> of <code>StringType</code> from a given <code>&amp;str</code>, assuming it…","Generate a <code>Vec</code> of <code>Value</code> from a given <code>&amp;str</code>","","","","","","","","","","","","",""],"i":[0,0,0,0,0,6,7,8,9,0,0,10,10,0,10,0,0,0,0,0,4,3,4,5,6,7,8,9,10,3,4,5,6,7,8,9,10,3,3,4,5,6,7,8,9,10,3,4,5,6,7,8,9,10,10,3,3,4,4,10,3,4,5,6,7,8,9,10,10,3,4,5,6,7,8,9,10,0,3,4,5,6,7,8,9,10,5,5,3,3,10,3,3,3,3,4,5,6,7,8,9,10,10,3,3,4,5,6,7,8,9,10,10,3,4,5,6,7,8,9,10,3,4,5,6,7,8,9,10,3,0,15,20,20,15,0,15,15,0,15,20,15,20,15,20,15,20,15,15,20,15,20,15,20,0,0,15,20,15,20,15,20,15,20,21,22,23,24,23],"f":[0,0,0,[1,2],[1,2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,10],11],0,0,0,0,[[10,10],12],[[3,13],14],[[4,13],14],[[5,13],14],[[6,13],14],[[7,13],14],[[8,13],14],[[9,13],14],[[10,13],14],[[10,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[16,[15]]],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[10,10],[[17,[11]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],0,[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[1,[[18,[10]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,[3,2],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[15,15],[20,20],[[]],[[]],[[15,15],12],[[15,13],14],[[20,13],14],[[]],[[]],[[]],[[]],[1,[[16,[20]]]],[1,[[16,[15]]]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],0,0,0,0,0],"p":[[15,"str"],[3,"String"],[3,"ParsedDoxygen"],[3,"Param"],[3,"Deprecated"],[3,"Note"],[3,"Warning"],[3,"Return"],[3,"ReturnValue"],[4,"Direction"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Value"],[3,"Vec"],[4,"Option"],[4,"Result"],[3,"TypeId"],[4,"StringType"],[13,"Parsed"],[13,"Raw"],[13,"Notation"],[13,"Text"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
